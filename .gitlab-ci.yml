stages:
  - build app
  - test image
  - build image
  - deploy app

variables:
  VERSION: latest
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$VERSION
  BUILD_APP: "true"
  BUILD_IMAGE: "false"
  TEST_APP: "false"
  DEPLOY_APP: "true"
  CLIENT: "aalillou"
  DEPLOY_SOURCE: "docker-compose.yml .env nginx dist"
  DEPLOY_USER: gitlab
  DEPLOY_SERVER: aws.$CLIENT.be
  DEPLOY_DEST: /datadrive/www/$CLIENT.be/public/

cache:
  paths:
    - node_modules/

build_app:
  image: mhart/alpine-node
  stage: build app
  script:
    - npm install --progress=false
    - npm run build
  artifacts:
    expire_in: 1 week
    paths:
      - dist
  only:
    variables:
      - $BUILD_APP == "true"
test:
  stage: test image
  script:
    - echo "testing the image"
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_PROJECT_PATH
    - echo $CI_PROJECT_NAMESPACE
    - echo $CI_PROJECT_NAME
    - echo $IMAGE_TAG

build_image:
  image: docker:stable
  stage: build image
  before_script:
    - echo "USER:$CI_REGISTRY_USER"
    - echo "PASSWORD:$CI_REGISTRY_PASSWORD"
    - echo $CI_REGISTRY
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  only:
    variables:
      - $BUILD_IMAGE == "true"

deploy_app:
  image: alpine
  stage: deploy app
  before_script:
    - apk add --no-cache rsync openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY2" >> ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - rsync -rav --delete --rsync-path="mkdir -p $DEPLOY_DEST && rsync" $DEPLOY_SOURCE $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_DEST
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "cd $DEPLOY_DEST && docker-compose up -d"
  only:
    variables:
      - $DEPLOY_APP == "true"

